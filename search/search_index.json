{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Task Management System","text":""},{"location":"#introduction","title":"Introduction","text":""},{"location":"#project-overview","title":"Project Overview","text":"<p>The project entails the development of a comprehensive task management system tailored to address the organizational &amp; individual needs for efficient task tracking, prioritization &amp; collaboration.</p>"},{"location":"#purpose-problem-statement","title":"Purpose &amp; Problem Statement","text":"<p>The task management system aims to alleviate the challenges associated with task organization, ensuring timely completion &amp; improved productivity. Common pain points such as task overload, missed deadlines &amp; disorganized workflows will be addressed through intuitive features &amp; user-centric design.</p>"},{"location":"#target-users-stakeholders","title":"Target Users &amp; Stakeholders","text":"<ul> <li>Primary Users: Individuals, teams &amp; organizations across various industries seeking enhanced task management capabilities.</li> <li>Stakeholders: Project managers, team leads, executives &amp; end-users invested in optimizing productivity &amp; workflow efficiency.</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Task Creation: Easily create new tasks with detailed descriptions &amp; attributes.</li> <li>Task Assignment: Assign tasks to specific users or teams, with clear ownership &amp; accountability.</li> <li>Prioritization: Set task priorities to ensure focus on critical activities &amp; deadlines.</li> <li>Deadline Setting: Define due dates &amp; deadlines for tasks to manage timelines effectively.</li> <li>Progress Tracking: Monitor task progress &amp; status updates in real-time to stay on track.</li> <li>Collaboration Tools: Facilitate communication &amp; collaboration among team members through comments, file attachments &amp; mentions.</li> <li>Customizable Workflows: Adapt the task management system to fit specific workflow requirements with customizable workflows &amp; task statuses.</li> </ul>"},{"location":"#project-objectives","title":"Project Objectives","text":"<p>The project aims to deliver a robust task management solution that streamlines task management processes, enhances team collaboration, improves task visibility &amp; ultimately boosts productivity &amp; project outcomes.</p>"},{"location":"#project-constraints-assumptions","title":"Project Constraints &amp; Assumptions","text":"<p>Constraints such as budget limitations, time constraints &amp; technological dependencies will be carefully managed to ensure project delivery within specified parameters. Assumptions regarding user behavior, system scalability &amp; adoption rates will guide decision-making throughout the project lifecycle.</p>"},{"location":"#project-scope","title":"Project Scope","text":"<p>The project scope encompasses the development of a demo task management system aimed at addressing the organizational &amp; individual needs for efficient task tracking, prioritization &amp; collaboration. The following components detail the scope of the project</p> <ul> <li>Project Objectives</li> <li>Develop a functional task management system within the allocated budget &amp; timeline.</li> <li>Showcase key features &amp; functionalities to demonstrate the capabilities of the system.</li> <li>Provide a user-friendly interface for efficient task organization &amp; collaboration.</li> <li>Deliverables</li> <li>Fully functional task management system developed using Python with FastAPI for the backend &amp; Vue.js for the frontend.</li> <li>Integration with PostgreSQL, Redis &amp; MongoDB for database functionalities.</li> <li>Implementation of CI/CD pipeline using GitHub Actions for automated testing &amp; deployment.</li> <li>Docker &amp; Kubernetes setup for containerization &amp; deployment.</li> <li>Constraints</li> <li>Budget: The project budget is allocated between $5000 - $6000.</li> <li>Timeline: The project must be completed within a timescale of 1 months.</li> <li>Technical: Backend in Python with FastAPI, frontend in Vue.js, databases including PostgreSQL, Redis &amp; MongoDB, CI/CD with GitHub Actions, Docker &amp; Kubernetes.</li> <li>Assumptions</li> <li>Stakeholder engagement &amp; feedback will be obtained throughout the project lifecycle to ensure alignment with expectations.</li> <li>Resources &amp; expertise are available to support the development, testing &amp; deployment of the task management system.</li> </ul>"},{"location":"#inclusions","title":"Inclusions","text":"<p>The task management system project will include the following key features &amp; functionalities:</p> <ul> <li>Task Creation: Users can create new tasks with descriptions &amp; details.</li> <li>Task Assignment: Ability to assign tasks to specific users or teams.</li> <li>Priority Setting: Users can prioritize tasks as high, medium, or low.</li> <li>Deadline Management: Setting due dates &amp; deadlines for tasks.</li> <li>Progress Tracking: Monitoring task completion status &amp; tracking progress.</li> <li>Collaboration: Tools for commenting on tasks &amp; sharing files.</li> <li>Customizable Workflows: Flexibility to adjust task statuses &amp; workflows.</li> </ul>"},{"location":"#exclusions","title":"Exclusions","text":"<p>The project scope does not encompass the following:</p> <ul> <li>Advanced reporting features.</li> <li>Third-party integrations beyond the specified technologies.</li> <li>Mobile application development.</li> </ul>"},{"location":"#scope-control","title":"Scope Control","text":"<p>The project scope will be managed to prevent scope creep &amp; ensure project alignment with defined objectives. Change requests will be evaluated against predefined criteria, considering their impact on project timeline, budget &amp; overall objectives. All scope changes must be approved by the project sponsor or designated authority before implementation.</p>"},{"location":"requirement_analysis/","title":"Requirement Analysis","text":""},{"location":"requirement_analysis/#user-requirements","title":"User Requirements","text":"<p>In order to develop a task management system that meets the needs of its users, it's essential to gather comprehensive user requirements. This section outlines the specific user requirements identified for the task management system project.</p>"},{"location":"requirement_analysis/#user-profile-management","title":"User Profile Management","text":"<ul> <li>Users should be able to create a profile with their personal information, including name, email, &amp; profile picture.</li> <li>Users should have the ability to edit their profile information &amp; update it as needed.</li> </ul>"},{"location":"requirement_analysis/#task-creation-management","title":"Task Creation &amp; Management","text":"<ul> <li>Users should be able to create new tasks with detailed descriptions, due dates, priority levels, &amp; assigned team members.</li> <li>Users should have access to a dashboard displaying all tasks assigned to them, sorted by priority &amp; due date.</li> <li>Users should be able to update the status of tasks, mark them as completed, &amp; add comments or attachments to provide updates &amp; collaborate with team members.</li> </ul>"},{"location":"requirement_analysis/#collaboration-communication","title":"Collaboration &amp; Communication","text":"<ul> <li>Users should be able to comment on tasks, ask questions, &amp; provide feedback to other team members.</li> <li>Users should receive notifications when there are updates or changes to tasks they are involved in, allowing them to stay informed &amp; respond promptly.</li> </ul>"},{"location":"requirement_analysis/#customize-personalization","title":"Customize &amp; Personalization","text":"<ul> <li>Users should have the ability to customize their task management dashboard, rearranging widgets &amp; adding shortcuts to frequently accessed features.</li> <li>Users should be able to set their notification preferences, choosing how &amp; when they receive notifications about task updates &amp; reminders.</li> </ul>"},{"location":"requirement_analysis/#reporting-analytics","title":"Reporting &amp; Analytics","text":"<ul> <li>Users should be able to generate reports &amp; view analytics on task completion rates, team productivity, &amp; performance metrics.</li> <li>Users should have access to visualizations &amp; charts that help them assess progress &amp; identify areas for improvement.</li> </ul> <p>These user requirements capture the key features &amp; functionalities that users expect from the task management system. They will serve as the foundation for the system design &amp; development process, ensuring that the final product meets user needs &amp; expectations.</p>"},{"location":"requirement_analysis/#stakeholder-requirements","title":"Stakeholder Requirements","text":"<p>This section outlines the specific requirements identified from key stakeholders involved in the project.</p>"},{"location":"requirement_analysis/#managers-team-leads","title":"Managers &amp; Team Leads","text":"<ul> <li>Managers &amp; team leads need the ability to create &amp; assign tasks to team members, set deadlines, &amp; track task completion.</li> <li>They require a centralized platform for team communication, including features such as task comments, file sharing, &amp; real-time notifications.</li> </ul>"},{"location":"requirement_analysis/#end-users","title":"End Users","text":"<ul> <li>End users expect an intuitive interface with easy navigation &amp; minimal learning curve for efficient task management.</li> <li>They need the flexibility to customize their task views &amp; notification preferences according to their workflow preferences.</li> </ul>"},{"location":"requirement_analysis/#functional-requirements","title":"Functional Requirements","text":""},{"location":"requirement_analysis/#user-authentication-authorization","title":"User Authentication &amp; Authorization","text":"<ul> <li>The system shall provide secure user authentication mechanisms to ensure that only authorized users can access the system.</li> <li>Users shall be able to log in using their credentials (username &amp; password) or alternative authentication methods such as single sign-on (SSO).</li> <li>User roles &amp; permissions shall be defined to control access to system functionalities &amp; data based on user roles (e.g., administrator, manager, team member).</li> </ul>"},{"location":"requirement_analysis/#task-crud","title":"Task CRUD","text":"<ul> <li>Users shall be able to create new tasks with details such as title, description, due date, priority, &amp; assigned team members.</li> <li>The system shall support task assignment to individual users or groups, allowing managers to delegate tasks efficiently.</li> <li>Users shall have the ability to update task status, mark tasks as complete, &amp; set reminders or notifications for upcoming deadlines.</li> </ul>"},{"location":"requirement_analysis/#task-collaboration-communication","title":"Task Collaboration &amp; Communication","text":"<ul> <li>The system shall facilitate collaboration among team members by providing features for task comments, discussions, &amp; file attachments.</li> <li>Users shall be notified of any updates or changes to tasks they are involved in, ensuring timely communication &amp; collaboration.</li> <li>The system shall maintain a centralized record of task-related communication &amp; interactions for reference &amp; auditing purposes.</li> </ul>"},{"location":"requirement_analysis/#dashboard-reporting","title":"Dashboard &amp; Reporting","text":"<ul> <li>The system shall provide a customizable dashboard for users to view their tasks, upcoming deadlines, &amp; project progress at a glance.</li> <li>Managers &amp; stakeholders shall have access to detailed reports &amp; analytics on task completion rates, team productivity, &amp; project performance metrics.</li> <li>Reports shall be exportable in various formats (e.g., PDF, CSV) for sharing &amp; analysis purposes.</li> </ul>"},{"location":"requirement_analysis/#integration-compatibility","title":"Integration &amp; Compatibility","text":"<ul> <li>The system shall integrate seamlessly with third-party tools &amp; services commonly used in project management &amp; collaboration, such as email clients, calendar applications, &amp; document management systems.</li> <li>The system shall be compatible with multiple web browsers (e.g., Chrome, Firefox, Safari) &amp; devices (e.g., desktops, laptops, tablets, smartphones) to ensure accessibility &amp; usability for all users.</li> </ul>"},{"location":"requirement_analysis/#non-functional-requirements","title":"Non-Functional Requirements","text":""},{"location":"requirement_analysis/#performance","title":"Performance","text":"<ul> <li>The system shall respond to user interactions within 2 seconds under normal load conditions.</li> <li>It shall support a minimum of 100 concurrent users without significant performance degradation.</li> </ul>"},{"location":"requirement_analysis/#reliability","title":"Reliability","text":"<ul> <li>The system shall have an uptime of at least 99.9% over a 30-day period, excluding scheduled maintenance.</li> <li>It shall provide automatic data backup and disaster recovery mechanisms to ensure data integrity and availability.</li> </ul>"},{"location":"requirement_analysis/#security","title":"Security","text":"<ul> <li>The system shall implement industry-standard encryption protocols (e.g., SSL/TLS) to secure data transmission over the network.</li> <li>User passwords shall be stored securely using cryptographic hashing algorithms to prevent unauthorized access.</li> </ul>"},{"location":"requirement_analysis/#scalability","title":"Scalability","text":"<ul> <li>The system architecture shall be designed to scale horizontally to accommodate increasing user loads.</li> <li>It shall support dynamic provisioning of resources to handle spikes in user activity without performance degradation.</li> </ul>"},{"location":"requirement_analysis/#usability","title":"Usability","text":"<ul> <li>The system shall provide clear and intuitive user interfaces with consistent navigation and layout across all modules.</li> <li>It shall support accessibility standards (e.g., WCAG) to ensure usability for users with disabilities.</li> </ul>"},{"location":"requirement_analysis/#compatibility","title":"Compatibility","text":"<ul> <li>The system shall be compatible with modern web browsers (e.g., Chrome, Firefox, Edge) and operating systems (e.g., Windows, macOS, Linux).</li> <li>It shall support responsive design principles to ensure optimal user experience across various devices and screen sizes.</li> </ul>"},{"location":"requirement_analysis/#maintainability","title":"Maintainability","text":"<ul> <li>The system shall be modular and well-documented, allowing for ease of maintenance and future enhancements.</li> <li>It shall adhere to coding standards and best practices to facilitate code readability and maintainability.</li> </ul>"},{"location":"requirement_analysis/#interoperability","title":"Interoperability","text":"<ul> <li>The system shall support interoperability with existing enterprise systems and databases through standard APIs and data exchange formats.</li> <li>It shall integrate seamlessly with external services and tools commonly used in project management and collaboration.</li> </ul>"},{"location":"services/auth/api/","title":"Api","text":""},{"location":"services/auth/api/#auth-service-v301","title":"Auth Service v3.0.1","text":"<p>Authentication and authorization related entrypoints of simple task management system Micro Service backend.</p> Contact: Sabbir Ahmed Shourov write2shourov@gmail.com"},{"location":"services/auth/api/#endpoints","title":"Endpoints","text":""},{"location":"services/auth/api/#get-healthcheck","title":"GET /healthcheck","text":"<p>Healthcheck</p> Description <p>Endpoint for health check.</p> <p>Returns:     Response: A Response object with status code 200 indicating successful health check.</p> <p> Response 200 OK </p> application/json Schema of the response body"},{"location":"services/auth/api/#get","title":"GET /","text":"<p>Root Api</p> Description <p>Root API endpoint.</p> <p>Returns:     dict: A dictionary with a message key indicating the auth service.</p> <p> Response 200 OK </p> application/json Schema of the response body"},{"location":"services/auth/main/","title":"Main","text":""},{"location":"services/auth/main/#src.auth_service.main.healthcheck","title":"<code>healthcheck()</code>","text":"<p>Endpoint for health check.</p> <p>Returns:</p> Name Type Description <code>Response</code> <p>A Response object with status code 200 indicating successful health check.</p> Source code in <code>src/auth_service/main.py</code> <pre><code>@app.get(\"/healthcheck\")\ndef healthcheck():\n    \"\"\"\n    Endpoint for health check.\n\n    Returns:\n        Response: A Response object with status code 200 indicating successful health check.\n    \"\"\"\n    return Response(status_code=200)\n</code></pre>"},{"location":"services/auth/main/#src.auth_service.main.root_api","title":"<code>root_api()</code>","text":"<p>Root API endpoint.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary with a message key indicating the auth service.</p> Source code in <code>src/auth_service/main.py</code> <pre><code>@app.get(\"/\")\ndef root_api():\n    \"\"\"\n    Root API endpoint.\n\n    Returns:\n        dict: A dictionary with a message key indicating the auth service.\n    \"\"\"\n    return {\"msg\": \"auth_service\"}\n</code></pre>"},{"location":"services/auth/test/","title":"Test","text":""},{"location":"services/auth/test/#src.auth_service.test_main.test_app","title":"<code>test_app()</code>","text":"<p>Test Application Root</p> <p>This function tests the root endpoint of the application to ensure it returns the expected JSON response.</p> Source code in <code>src/auth_service/test_main.py</code> <pre><code>def test_app():\n    \"\"\"\n    Test Application Root\n\n    This function tests the root endpoint of the application to ensure it returns the expected JSON response.\n    \"\"\"\n    assert tmp_client.get(\"/\").json() == {\"msg\": \"auth_service\"}\n</code></pre>"},{"location":"services/auth/test/#src.auth_service.test_main.test_healthcheck","title":"<code>test_healthcheck()</code>","text":"<p>Test Health Check</p> <p>This function tests the health check endpoint to ensure the server is running properly.</p> Source code in <code>src/auth_service/test_main.py</code> <pre><code>def test_healthcheck():\n    \"\"\"\n    Test Health Check\n\n    This function tests the health check endpoint to ensure the server is running properly.\n    \"\"\"\n    assert tmp_client.get(\"/healthcheck\").status_code == 200\n</code></pre>"},{"location":"services/main/api/","title":"Api","text":""},{"location":"services/main/api/#main-service-api-v301","title":"Main Service API v3.0.1","text":"<p>Main entrypoint of simple task management system Micro Service backend.</p> Contact: Sabbir Ahmed Shourov write2shourov@gmail.com"},{"location":"services/main/api/#healthcheck","title":"healthcheck","text":""},{"location":"services/main/api/#get-healthcheck","title":"GET /healthcheck","text":"<p>Healthcheck</p> Description <p>Health Check Endpoint.</p> <p>Returns:     Response: A FastAPI Response indicating the health status.</p> <p> Response 200 OK </p> application/json Schema of the response body"},{"location":"services/main/api/#service","title":"service","text":""},{"location":"services/main/api/#get","title":"GET /","text":"<p>Root</p> Description <p>Root API endpoint.</p> <p>Returns:     dict: A dictionary with a message key indicating the main service.</p> <p> Response 200 OK </p> application/json Schema of the response body"},{"location":"services/main/main/","title":"Main","text":""},{"location":"services/main/main/#src.main_service.main.healthcheck","title":"<code>healthcheck()</code>","text":"<p>Health Check Endpoint.</p> <p>Returns:</p> Name Type Description <code>Response</code> <p>A FastAPI Response indicating the health status.</p> Source code in <code>src/main_service/main.py</code> <pre><code>@app.get(\"/healthcheck\", status_code=200, tags=[\"healthcheck\"])\ndef healthcheck():\n    \"\"\"Health Check Endpoint.\n\n    Returns:\n        Response: A FastAPI Response indicating the health status.\n    \"\"\"\n    return Response(status_code=200)\n</code></pre>"},{"location":"services/main/main/#src.main_service.main.root","title":"<code>root()</code>","text":"<p>Root API endpoint.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary with a message key indicating the main service.</p> Source code in <code>src/main_service/main.py</code> <pre><code>@app.get(\"/\", tags=[\"service\"])\ndef root():\n    \"\"\"\n    Root API endpoint.\n\n    Returns:\n        dict: A dictionary with a message key indicating the main service.\n    \"\"\"\n    return {\"msg\": \"main_service\"}\n</code></pre>"},{"location":"services/main/test/","title":"Test","text":""},{"location":"services/main/test/#src.main_service.test_main.test_app","title":"<code>test_app()</code>","text":"<p>Test Application Root</p> <p>This function tests the root endpoint of the application to ensure it returns the expected JSON response.</p> Source code in <code>src/main_service/test_main.py</code> <pre><code>def test_app():\n    \"\"\"\n    Test Application Root\n\n    This function tests the root endpoint of the application to ensure it returns the expected JSON response.\n    \"\"\"\n    assert tmp_client.get(\"/\").json() == {\"msg\": \"main_service\"}\n</code></pre>"},{"location":"services/main/test/#src.main_service.test_main.test_healthcheck","title":"<code>test_healthcheck()</code>","text":"<p>Test Health Check</p> <p>This function tests the health check endpoint to ensure the server is running properly.</p> Source code in <code>src/main_service/test_main.py</code> <pre><code>def test_healthcheck():\n    \"\"\"\n    Test Health Check\n\n    This function tests the health check endpoint to ensure the server is running properly.\n    \"\"\"\n    assert tmp_client.get(\"/healthcheck\").status_code == 200\n</code></pre>"},{"location":"services/user/api/","title":"Api","text":""},{"location":"services/user/api/#user-service-v301","title":"User Service v3.0.1","text":"<p>User related entrypoints of simple task management system Micro Service backend.</p> Contact: Sabbir Ahmed Shourov write2shourov@gmail.com"},{"location":"services/user/api/#endpoints","title":"Endpoints","text":""},{"location":"services/user/api/#get-healthcheck","title":"GET /healthcheck","text":"<p>Healthcheck</p> Description <p>Endpoint for health check.</p> <p>Returns:     Response: A Response object with status code 200 indicating successful health check.</p> <p> Response 200 OK </p> application/json Schema of the response body"},{"location":"services/user/api/#get","title":"GET /","text":"<p>Root Api</p> Description <p>Root API endpoint.</p> <p>Returns:     dict: A dictionary with a message key indicating the user service.</p> <p> Response 200 OK </p> application/json Schema of the response body"},{"location":"services/user/main/","title":"Main","text":""},{"location":"services/user/main/#src.user_service.main.healthcheck","title":"<code>healthcheck()</code>","text":"<p>Endpoint for health check.</p> <p>Returns:</p> Name Type Description <code>Response</code> <p>A Response object with status code 200 indicating successful health check.</p> Source code in <code>src/user_service/main.py</code> <pre><code>@app.get(\"/healthcheck\")\ndef healthcheck():\n    \"\"\"\n    Endpoint for health check.\n\n    Returns:\n        Response: A Response object with status code 200 indicating successful health check.\n    \"\"\"\n    return Response(status_code=200)\n</code></pre>"},{"location":"services/user/main/#src.user_service.main.root_api","title":"<code>root_api()</code>","text":"<p>Root API endpoint.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary with a message key indicating the user service.</p> Source code in <code>src/user_service/main.py</code> <pre><code>@app.get(\"/\")\ndef root_api():\n    \"\"\"\n    Root API endpoint.\n\n    Returns:\n        dict: A dictionary with a message key indicating the user service.\n    \"\"\"\n    return {\"msg\": \"user_service\"}\n</code></pre>"},{"location":"services/user/test/","title":"Test","text":""},{"location":"services/user/test/#src.user_service.test_main.test_app","title":"<code>test_app()</code>","text":"<p>Test Application Root</p> <p>This function tests the root endpoint of the application to ensure it returns the expected JSON response.</p> Source code in <code>src/user_service/test_main.py</code> <pre><code>def test_app():\n    \"\"\"\n    Test Application Root\n\n    This function tests the root endpoint of the application to ensure it returns the expected JSON response.\n    \"\"\"\n    assert tmp_client.get(\"/\").json() == {\"msg\": \"user_service\"}\n</code></pre>"},{"location":"services/user/test/#src.user_service.test_main.test_healthcheck","title":"<code>test_healthcheck()</code>","text":"<p>Test Health Check</p> <p>This function tests the health check endpoint to ensure the server is running properly.</p> Source code in <code>src/user_service/test_main.py</code> <pre><code>def test_healthcheck():\n    \"\"\"\n    Test Health Check\n\n    This function tests the health check endpoint to ensure the server is running properly.\n    \"\"\"\n    assert tmp_client.get(\"/healthcheck\").status_code == 200\n</code></pre>"}]}